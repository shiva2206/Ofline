plugins {
    id "com.android.application"
    id "com.google.gms.google-services" // Firebase configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.ofline_marketplace.ofline_app"
    compileSdkVersion 34 // Update to 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.ofline_marketplace.ofline_app"
        minSdkVersion 23 // Typically set to a lower value for backward compatibility
        targetSdkVersion 34 // Update to 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            dimension "env"
            versionNameSuffix "-dev"
        }
        prod {
            dimension "env"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.firebase:firebase-appcheck-playintegrity:16.0.0-beta04'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.0.0"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.firebase:firebase-auth:23.0.0'
    implementation 'com.google.android.gms:play-services-auth:21.2.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation "com.squareup.okio:okio:2.8.0"

    // Firebase Messaging with exclusion of firebase-iid to resolve conflict
    implementation('com.google.firebase:firebase-messaging:24.0.0') {
        exclude group: 'com.google.firebase', module: 'firebase-iid'
    }
    // Explicitly add the latest version of firebase-iid
    implementation 'com.google.firebase:firebase-iid:21.1.0'
}

// Resolve dependency conflicts
configurations.all {
    resolutionStrategy.force "com.squareup.okio:okio:2.8.0"
}

// Add this block to handle different google-services.json files
android.applicationVariants.all { variant ->
    def flavorName = variant.flavorName
    def variantName = variant.name

    def fileName = flavorName == "prod" ? "google-services.json" : "google-services-dev.json"

    def srcDir = "${project.rootDir}/app"
    def destDir = "${project.buildDir}/generated/res/google-services/${variantName}"

    // Create a copy task
    def copyGoogleServicesJson = tasks.register("copy${variantName.capitalize()}GoogleServicesJson", Copy) {
        from("${srcDir}/${fileName}")
        into(destDir)
        rename { "google-services.json" }
    }

    // Ensure the copy task runs before the google services plugin
    variant.mergeResources.dependsOn copyGoogleServicesJson
}

apply plugin: 'com.google.gms.google-services'
